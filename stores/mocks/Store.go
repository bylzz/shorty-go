// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/roboncode/go-urlshortener/models"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Create provides a mock function with given fields: code, url
func (_m *Store) Create(code string, url string) (*models.Link, error) {
	ret := _m.Called(code, url)

	var r0 *models.Link
	if rf, ok := ret.Get(0).(func(string, string) *models.Link); ok {
		r0 = rf(code, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(code, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: code
func (_m *Store) Delete(code string) int64 {
	ret := _m.Called(code)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IncCount provides a mock function with given fields:
func (_m *Store) IncCount() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// List provides a mock function with given fields: limit, skip
func (_m *Store) List(limit int64, skip int64) []models.Link {
	ret := _m.Called(limit, skip)

	var r0 []models.Link
	if rf, ok := ret.Get(0).(func(int64, int64) []models.Link); ok {
		r0 = rf(limit, skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Link)
		}
	}

	return r0
}

// Read provides a mock function with given fields: code
func (_m *Store) Read(code string) (*models.Link, error) {
	ret := _m.Called(code)

	var r0 *models.Link
	if rf, ok := ret.Get(0).(func(string) *models.Link); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
